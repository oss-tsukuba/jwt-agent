#!/bin/sh

VERSION=1.1.0
CURL=curl
PORT=443
FOREGROUND=false
MODE=start
TIMEOUT=60

CMDNAME=$(basename "$0")
CURRENT=$(dirname "$0")

usage()
{
  echo >&2 "Usage: $CMDNAME [-s URL] [-l USER] [-f] [-t TIMEOUT]"
  echo >&2 "       $CMDNAME --status"
  echo >&2 "       $CMDNAME --stop [-t TIMEOUT]"
  echo >&2 "       $CMDNAME --version"
  exit 2
}

is_jwt_agent_ready() {
  old_jwt=$1

  if [ ! -f "$DOWNLOAD_PATH" -o ! -f "$PIDFILE" ]; then
    return 1
  fi
  case "$old_jwt" in
  '') return 0;;
  *) [ "$DOWNLOAD_PATH" -nt "$old_jwt" ];;
  esac
}

if [ -z "$JWT_USER_PATH" ]; then
  USER_ID=`id -u`
  DOWNLOAD_DIR="/tmp/jwt_user_u$USER_ID"
  DOWNLOAD_PATH="${DOWNLOAD_DIR}/token.jwt"
else
  DOWNLOAD_PATH="$JWT_USER_PATH"
  DOWNLOAD_DIR=$(dirname "$DOWNLOAD_PATH")
fi
PIDFILE="$DOWNLOAD_DIR/jwt-agent.pid"
OUTFILE="$DOWNLOAD_DIR/jwt-agent.out"
ERRFILE="$DOWNLOAD_DIR/jwt-agent.err"

umask 077
mkdir -p "$DOWNLOAD_DIR"

if [ -n "$JWT_SERVER_URL" ]; then
  URL=$JWT_SERVER_URL
fi

if [ -n "$LOGNAME" ]; then
  ACCOUNT=$LOGNAME
fi

while getopts ":s:l:p:ft:-:" OPT
do
  if [ "$OPT" = "-" ]; then OPT="-$OPTARG"; fi
  case "-$OPT" in
  -s) URL=$URL" ""$OPTARG" ;;
  -l) ACCOUNT="$OPTARG" ;;
  -p) PORT="$OPTARG" ;;
  -f) FOREGROUND=true ;;
  -t) TIMEOUT="$OPTARG" ;;
  --status) MODE=status ;;
  --stop) MODE=stop ;;
  --version)
    echo "${CMDNAME} version ${VERSION}"
    exit 0 ;;
  '-?')
    echo >&2 "${CMDNAME}: unknown option -$OPTARG"
    usage;;
  *)
    echo >&2 "${CMDNAME}: unknown option -$OPT"
    usage;;
  esac
done
shift $((OPTIND - 1))
case $# in
0) :;;
*)
  echo >&2 "${CMDNAME}: unused arguments: $*"
  usage;;
esac

case $MODE in
start)

  if [ -z "$URL" -o -z "$ACCOUNT" ]; then
    usage
  fi

# remove the first space
  URL=$(echo $URL)

  if [ -t 0 ]; then
    echo -n "Passphrase: "
    trap "stty echo" HUP INT QUIT TERM
    stty -echo
    read PASS
    stty echo

    echo
  else
    read PASS
  fi

  if $FOREGROUND; then
    echo "$PASS" | $CURRENT/jwt-agent-core -s "$URL" -l "$ACCOUNT"
  else # background

    # create a marker file ($OLD_JWT) to see whether jwt-agent started or not
    if [ -f "$DOWNLOAD_PATH" ]; then
      OLD_JWT="${DOWNLOAD_PATH}.bak"
      TMP_JWT="${DOWNLOAD_PATH}.tmp"
      cp -p "$DOWNLOAD_PATH" "$OLD_JWT"
      cp    "$DOWNLOAD_PATH" "$TMP_JWT"
      if [ ! "$TMP_JWT" -nt "$OLD_JWT" ]; then
        # time resolution of the filesystem is too coarse
        need_sleep=true
      else
        need_sleep=false
      fi
      rm -f "$TMP_JWT"
    else
      OLD_JWT=
      need_sleep=false
    fi

    # if both stdout and stderr are not TTY, redirect them to files
    # to make "ssh <HOST> jwt-agent ..." finish immediately
    exit_status=1
    if [ -t 1 -o -t 2 ]; then
      if [ ! -t 1 ]; then
        exec 1>&2
      elif [ ! -t 2 ]; then
        exec 2>&1
      fi

      interactive=true

      echo "$PASS" | $CURRENT/jwt-agent-core -s "$URL" -l "$ACCOUNT" &
      pid=$!
    else
      interactive=false

      out_pid=0
      err_pid=0
      trap 'rm -f "${OUTFILE}.new" "${ERRFILE}.new";
        kill $out_pid $err_pid; exit $exit_status' 0 1 2 15

      echo "$PASS" | $CURRENT/jwt-agent-core -s "$URL" -l "$ACCOUNT" \
        >"${OUTFILE}.new" 2>"${ERRFILE}.new" &
      pid=$!
      tail -f "${OUTFILE}.new" &
      out_pid=$!
      tail -f "${ERRFILE}.new" &
      err_pid=$!
    fi

    if $need_sleep && kill -0 $pid 2>/dev/null; then
      sleep 1
    else
      # to avoid "sleep 1" in the while loop below,
      # when jwt-agent-core aborted immediately
      sleep 0.1
    fi

    # wait until JWT and PIDFILE are created
    i=0
    while ! is_jwt_agent_ready "$OLD_JWT"; do
      i=$((i + 1))
      if [ $i -gt "$TIMEOUT" ]; then
        echo >&2 "$CMDNAME (pid $pid): too long time to acquire JWT, timed out"
        exit_status=2
        exit $exit_status
      fi
      if ! kill -0 $pid 2>/dev/null; then
        echo >&2 "$CMDNAME (pid $pid) aborted"
        exit_status=1
        exit $exit_status
      fi
      sleep 1
    done

    exit_status=0
    if ! $interactive; then
      echo "Output stdout to ${OUTFILE}"
      echo "Output stderr to ${ERRFILE}"
      mv -f "${OUTFILE}" "${OUTFILE}.bak" 2>/dev/null
      mv -f "${ERRFILE}" "${ERRFILE}.bak" 2>/dev/null
      mv -f "${OUTFILE}.new" "${OUTFILE}"
      mv -f "${ERRFILE}.new" "${ERRFILE}"
    fi

  fi # background
  ;;

stop)
  if [ -f "$PIDFILE" ]; then
    pid=$(cat "$PIDFILE")
    if kill -TERM $pid 2>/dev/null; then
      i=0
      while kill -0 $pid 2>/dev/null; do
        i=$((i + 1))
        if [ $i -gt "$TIMEOUT" ]; then
          echo "cannot stop $CMDNAME (pid $pid), aborted"
          exit 2
        fi
        echo "old $CMDNAME (pid $pid) is still running, sleeping..."
        sleep 1
      done
      rm -f "$PIDFILE"
      echo "$CMDNAME (pid $pid) stopped"
    else
      echo "$CMDNAME (pid $pid) is not running? (check $PIDFILE)"
      exit 1
    fi
  else
    echo "$CMDNAME is already stopped (no $PIDFILE)"
    exit 1
  fi
  ;;

status)
  if [ -f "$PIDFILE" ] && kill -0 $(cat "$PIDFILE") 2>/dev/null; then
    echo "$CMDNAME (pid $(cat "$PIDFILE")) is running"
  elif [ -f "$PIDFILE" ]; then
    echo "$CMDNAME (pid $(cat "$PIDFILE")) is not running? (check $PIDFILE)"
    exit 1
  else
    echo "$CMDNAME is stopped (no $PIDFILE)"
    exit 1
  fi
  ;;
esac
